{
  "errors": [],
  "failures": [
    {
      "test": "helloworld_tests.HelloWorldTest.test2",
      "traceback": "Traceback (most recent call last):\n  File \"/usr/lib/python3.10/unittest/case.py\", line 59, in testPartExecutor\n    yield\n  File \"/usr/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/media/Datacenter/google/education/torrens/DOT/DOT/DOT503/src/unittest/python/helloworld_tests.py\", line 15, in test2\n    verify(out).write(\"Hello world of Monty Python\\n\")\n  File \"/usr/lib/python3/dist-packages/mockito/invocation.py\", line 242, in __call__\n    self.verification.verify(self, len(matched_invocations))\n  File \"/usr/lib/python3/dist-packages/mockito/verification.py\", line 93, in verify\n    raise VerificationError(\nmockito.verification.VerificationError: \nWanted but not invoked:\n\n    write('Hello world of Monty Python\\n')\n\nInstead got:\n\n    write('Hello world of Python\\n')\n\n\n"
    },
    {
      "test": "helloworld_tests.HelloWorldTest.test_upper",
      "traceback": "Traceback (most recent call last):\n  File \"/usr/lib/python3.10/unittest/case.py\", line 59, in testPartExecutor\n    yield\n  File \"/usr/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/media/Datacenter/google/education/torrens/DOT/DOT/DOT503/src/unittest/python/helloworld_tests.py\", line 18, in test_upper\n    self.assertEqual('foo'.upper(), 'FOo')\n  File \"/usr/lib/python3.10/unittest/case.py\", line 845, in assertEqual\n    assertion_func(first, second, msg=msg)\n  File \"/usr/lib/python3.10/unittest/case.py\", line 1226, in assertMultiLineEqual\n    self.fail(self._formatMessage(msg, standardMsg))\n  File \"/usr/lib/python3.10/unittest/case.py\", line 675, in fail\n    raise self.failureException(msg)\nAssertionError: 'FOO' != 'FOo'\n- FOO\n?   ^\n+ FOo\n?   ^\n\n"
    }
  ],
  "tests-run": 5
}